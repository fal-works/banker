package banker.finite.interfaces;

import banker.vector.Vector;

/**
	Interface that can be used for classes generated by `FiniteKeys` macro.

	Not that this is not automatically implemented.
**/
interface FiniteKeysMap<K, V> {
	/**
		@return The value mapped from `key`.
	**/
	function get(key: K): V;

	/**
		Creates a function that gets the value mapped from `key`.
	**/
	function getter(key: K): () -> V;

	/**
		Creates a vector from all keys of `this`.
	**/
	function exportKeys(): Vector<K>;

	/**
		Creates a vector from all values of `this`.
	**/
	function exportValues(): Vector<V>;

	function forEachKey(callback: (key: K) -> Void): Void;
	function forEachValue(callback: (value: V) -> Void): Void;
	function forEach(callback: (key: K, value: V) -> Void): Void;
}
